datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

model Account {
  id                String  @id @default(cuid()) @map("_id")
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid()) @map("_id")
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String      @id @default(cuid()) @map("_id")
  name          String?
  username      String?
  email         String?     @unique
  emailVerified DateTime?
  bio           String?
  website       String?
  gender        String?
  image         String?
  visibility    Boolean     @default(true)
  location      String?
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  followedby    Follows[]   @relation("following")
  following     Follows[]   @relation("followers")
  Savedpost     SavedPost[]
  likes         Like[]
  comments      Comment[]
}

model Post {
  id        String      @id @default(cuid()) @map("_id")
  createdAT DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  caption   String
  fileUrl   String
  showlike  Boolean     @default(true)
  user      User        @relation(fields: [userId], references: [id])
  userId    String      @map("user_id")
  savedby   SavedPost[]
  likes     Like[]
  comments  Comment[]
}

model Follows {
  id          String @id @default(cuid()) @map("_id")
  follower    User   @relation("followers", fields: [followerId], references: [id])
  followerId  String
  following   User   @relation("following", fields: [followingId], references: [id])
  followingId String

  @@unique([followerId, followingId])
}

model SavedPost {
  id        String   @id @default(cuid()) @map("_id")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  post      Post     @relation(fields: [postid], references: [id], onDelete: Cascade)
  postid    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @map("user_id")

  @@unique([postid, userId])
}

model Like {
  id        String   @id @default(cuid()) @map("_id")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  userId    String   @map("user_id")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
}

model Comment {
  id        String   @id @default(cuid()) @map("_id")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  body      String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  userId    String   @map("user_id")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
